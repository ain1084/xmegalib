/*
 * SPDIFFrameEncoder.h
 *
 * Created: 2016/02/10 0:02:08
 *  Author: Seiji Ainoguchi
 */ 

#include "SPDIFFrame.h"
#include "Audio/SampleData.h"
#include "SPDIFFrameEncoder.h"
#include <string.h>

using namespace XMEGA;

namespace
{
	const uint8_t MAX_FRAME_NUMBER = 192;
}

SPDIFFrameEncoder::SPDIFFrameEncoder(void)
: _frameNumber(MAX_FRAME_NUMBER)
{
	
}

void SPDIFFrameEncoder::encodeSubFrame(uint8_t preamble, int audio, SPDIFSubFrame& subFrame)
{
	subFrame.Preamble = preamble;
	subFrame.Aux      = 0b11001100;
	subFrame.Audio[0] = 0b11001100;

	auto audioLow = static_cast<uint8_t>(audio & 0xFF);
	subFrame.Audio[1] = _lowNibbleCodedTable[audioLow & 0xF];
	subFrame.Audio[2] = _codedTable[audioLow];
	auto polarity = (subFrame.Audio[2] & 1) ? 0xFF : 0x00;

	auto audioHigh = static_cast<uint8_t>((static_cast<uint16_t>(audio) >> 8) & 0xFF);
	subFrame.Audio[3] = _lowNibbleCodedTable[audioHigh & 0xF] ^ polarity;
	subFrame.Audio[4] = _codedTable[audioHigh] ^ polarity;
	subFrame.Data = (subFrame.Audio[4] & 1) ? 0b00110010 : 0b11001100;
}

void SPDIFFrameEncoder::Encode(const Audio::SampleData samples[], SPDIFFrame spdifFrames[], size_t sampleCount)
{
	const auto* pSample = samples;
	auto* pSpdifFrame = spdifFrames;

	auto frameNumber = _frameNumber;
	while (sampleCount-- != 0)
	{
		uint8_t preamble;
		if (frameNumber == MAX_FRAME_NUMBER)
		{
			frameNumber = 0;
			preamble = 0b11101000;
		}
		else
		{
			preamble = 0b11100010;
		}
		encodeSubFrame(preamble, pSample->L, pSpdifFrame->L);
		encodeSubFrame(0b11100100, pSample->R, pSpdifFrame->R);
		frameNumber++;
		pSpdifFrame++;
		pSample++;
	}
	_frameNumber = frameNumber;
}


const uint8_t SPDIFFrameEncoder::_lowNibbleCodedTable[] =
{
	0xcc, 0xb3, 0xd3, 0xac, 0xcb, 0xb4, 0xd4, 0xab,	0xcd, 0xb2, 0xd2, 0xad, 0xca, 0xb5, 0xd5, 0xaa
};

const uint8_t SPDIFFrameEncoder::_codedTable[] =
{
	0xcc, 0x33, 0x33, 0xcc, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0xcc, 0x33, 0x33, 0xcc,
	0xb3, 0x4c, 0x4c, 0xb3, 0x4c, 0xb3, 0xb3, 0x4c, 0x4c, 0xb3, 0xb3, 0x4c, 0xb3, 0x4c, 0x4c, 0xb3,
	0xd3, 0x2c, 0x2c, 0xd3, 0x2c, 0xd3, 0xd3, 0x2c, 0x2c, 0xd3, 0xd3, 0x2c, 0xd3, 0x2c, 0x2c, 0xd3,
	0xac, 0x53, 0x53, 0xac, 0x53, 0xac, 0xac, 0x53, 0x53, 0xac, 0xac, 0x53, 0xac, 0x53, 0x53, 0xac,
	0xcb, 0x34, 0x34, 0xcb, 0x34, 0xcb, 0xcb, 0x34, 0x34, 0xcb, 0xcb, 0x34, 0xcb, 0x34, 0x34, 0xcb,
	0xb4, 0x4b, 0x4b, 0xb4, 0x4b, 0xb4, 0xb4, 0x4b, 0x4b, 0xb4, 0xb4, 0x4b, 0xb4, 0x4b, 0x4b, 0xb4,
	0xd4, 0x2b, 0x2b, 0xd4, 0x2b, 0xd4, 0xd4, 0x2b, 0x2b, 0xd4, 0xd4, 0x2b, 0xd4, 0x2b, 0x2b, 0xd4,
	0xab, 0x54, 0x54, 0xab, 0x54, 0xab, 0xab, 0x54, 0x54, 0xab, 0xab, 0x54, 0xab, 0x54, 0x54, 0xab,
	0xcd, 0x32, 0x32, 0xcd, 0x32, 0xcd, 0xcd, 0x32, 0x32, 0xcd, 0xcd, 0x32, 0xcd, 0x32, 0x32, 0xcd,
	0xb2, 0x4d, 0x4d, 0xb2, 0x4d, 0xb2, 0xb2, 0x4d, 0x4d, 0xb2, 0xb2, 0x4d, 0xb2, 0x4d, 0x4d, 0xb2,
	0xd2, 0x2d, 0x2d, 0xd2, 0x2d, 0xd2, 0xd2, 0x2d, 0x2d, 0xd2, 0xd2, 0x2d, 0xd2, 0x2d, 0x2d, 0xd2,
	0xad, 0x52, 0x52, 0xad, 0x52, 0xad, 0xad, 0x52, 0x52, 0xad, 0xad, 0x52, 0xad, 0x52, 0x52, 0xad,
	0xca, 0x35, 0x35, 0xca, 0x35, 0xca, 0xca, 0x35, 0x35, 0xca, 0xca, 0x35, 0xca, 0x35, 0x35, 0xca,
	0xb5, 0x4a, 0x4a, 0xb5, 0x4a, 0xb5, 0xb5, 0x4a, 0x4a, 0xb5, 0xb5, 0x4a, 0xb5, 0x4a, 0x4a, 0xb5,
	0xd5, 0x2a, 0x2a, 0xd5, 0x2a, 0xd5, 0xd5, 0x2a, 0x2a, 0xd5, 0xd5, 0x2a, 0xd5, 0x2a, 0x2a, 0xd5,
	0xaa, 0x55, 0x55, 0xaa, 0x55, 0xaa, 0xaa, 0x55, 0x55, 0xaa, 0xaa, 0x55, 0xaa, 0x55, 0x55, 0xaa,
};
